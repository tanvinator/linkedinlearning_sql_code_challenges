--Challenge 1: Difficulty 1/4
--Check Book availability
----Challenge Description:
------- Find the number of available copies of Dracula
----Requirements:
------- 

--Query:
SELECT
--Querying total number of books
	(SELECT COUNT(BookID)
	 FROM Books
	 WHERE Title = 'Dracula')
--Subtracting the loaned books query
		-
--Querying the loaned books
	(SELECT COUNT(Books.Title)
	 FROM Loans
	 JOIN Books
	 ON Books.BookID = Loans.BookID 
	 WHERE Books.Title = 'Dracula'
		 AND
		 Loans.ReturnedDate IS NULL)
AS available_books;

--======================================================================================================
--Challenge 2: Difficulty 2/4
--Add to the books table

--Query:

INSERT INTO Books (Title, Author,Published, Barcode) VALUES 
                  ("Dracula", "Bram Stoker", "1897", "4819277482"),
                  ("Gulliver's Travels", "Jonathan Swift", "1729", "4899254401");


SELECT *
FROM Books
WHERE Title IN ("Dracula", "Gulliver's Travels");

--======================================================================================================
--Challenge 3: Difficulty 3/4
--Check Out two books to patron

--Query:

INSERT INTO Loans (BookID, PatronID, LoanDate, DueDate)
VALUES 
		((SELECT BookID FROM Books WHERE Title = "The Picture of Dorian Gray" AND Barcode = 2855934983),
		(SELECT PatronID FROM Patrons WHERE FirstName = "Jack" AND LastName = "Vaan" AND Email = "jvaan@wisdompets.com"), 
		"2020-08-25", "2020-09-08"),

        ((SELECT BookID FROM Books WHERE Title = "Great Expectations" AND Barcode = 4043822646),
	    (SELECT PatronID FROM Patrons WHERE FirstName = "Jack" AND LastName = "Vaan" AND Email = "jvaan@wisdompets.com"), 
		"2020-08-25", "2020-09-08");

SELECT * FROM Loans WHERE PatronID IN (SELECT PatroNID FROM Patrons WHERE FirstName = "Jack" AND LastName = "Vaan" AND Email = "jvaan@wisdompets.com");
SELECT * FROM Books WHERE Title IN ("The Picture of Dorian Gray", "Great Expectations");

--======================================================================================================
--Challenge 4: Difficulty 3/4
--Make a report on books due on July 13, 2020

--Query:

SELECT b.Title, 
	   l.LoanDate, l.DueDate, 
	   (p.FirstName || " " || p.LastName) AS PatronName, p.Email, 
	   CASE 
		WHEN l.ReturnedDate IS NULL THEN "Not Returned"
		ELSE "Returned"
	   END AS BookReturnStatus

FROM Loans l
JOIN Patrons p
ON l.PatronID = p.PatronID
JOIN Books b
ON l.BookID = b.BookID
WHERE l.DueDate = "2020-07-13"
ORDER BY BookReturnStatus;

--======================================================================================================
--Challenge 5 : Difficulty 3/4
--Return books to the library
---- Description:
-------- Return the books on July 5, 2020

--Query:
UPDATE Loans SET ReturnedDate = "2020-07-15"
WHERE BookID IN (SELECT BookID 
				  FROM Books
				  WHERE Barcode IN ("6435968624","5677520613","8730298424"))
	AND ReturnedDate IS NULL;
	
SELECT * FROM Loans 
WHERE ReturnedDate = "2020-07-15"; 
				  
--======================================================================================================
--Challenge 6: Difficulty 4/4
--Report the patrons (top 10) who have least book loans

--Query:

SELECT (FirstName || " " || LastName) AS PatronName, p.Email, 
COUNT(l.LoanID) as numBookLoans
FROM Loans l
JOIN Patrons p
ON l.PatronID = p.PatronID
GROUP BY l.PatronID
ORDER BY numBookLoans, PatronName
LIMIT 10;

--======================================================================================================
--Challenge 7: Difficulty 4/4
--Report the list of books from 1890s which are available in the library

--Query:

SELECT b.Title, b.BookID, b.Author, b.Published
FROM Books b
JOIN Loans l
ON b.BookID = l.BookID
WHERE b.Published LIKE "189_"
AND l.ReturnedDate IS NOT NULL
GROUP BY b.BookID
ORDER BY Published, b.Title;

--======================================================================================================
--Challenge 8: Difficulty 4/4
--Report the number of books published each year
-- Report the most famous books for checkout

--Query:

SELECT Published, COUNT(DISTINCT(Title)) AS numBooks
FROM Books
GROUP BY Published
ORDER BY numBooks DESC, Published;

SELECT b.Title, b.Author, b.Published, COUNT(l.LoanID) AS numLoans
FROM Loans l
JOIN Books b
ON l.BookID = b.BookID
GROUP BY b.Title
ORDER BY numLoans DESC, b.Published, b.Title 
LIMIT 5;

--======================================================================================================
